<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		 xmlns="http://java.sun.com/xml/ns/javaee" 
		 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
		 id="WebApp_ID" 
		 version="3.0">
  <display-name>mvc</display-name>
  
  <!-- 톰캣 서버에 설정한 DataSource를 웹 애플리케이션에서 사용하려면 DD파일(web.xml)에 서버자원을 참조한다는 선언
  	res-ref-name : JNDI 이름(tomcat서버의 context.xml에 선언한 자원의 이름)
  	res-ref-type : 리턴될 자원의 클래스 이름(패키지명 포함)(tomcat서버에서 리턴하는 자원의 타입. context.xml에 선언한 자원의 타입과 같아야 함)
  	res-auth : 자원 관리의 주체 (tomcat서버가 리턴하는 자원의 관리 주체. 'Container'는 서버에서 관리한다는 의미)
  	
  	*JNDI : Java naming and Directory Interface API의 머리글자. 디렉터리 서비스에 접근하는데 필요한 API이며 애플리케이션은 이 API를 사용하여 서버의 자원을 찾을 수 있다. (참조:자바 웹 개발 워크북 p.421)
  -->
  <resource-ref>
  	<res-ref-name>jdbc/mvc</res-ref-name>
  	<res-type>javax.sql.DataSource</res-type>
  	<res-auth>Container</res-auth>
  </resource-ref>
  
  <!-- 콘텍스트 초기화 매개변수 -->
  <context-param>
    <param-name>driver</param-name>
    <param-value>com.mysql.jdbc.Driver</param-value>
  </context-param>
  <context-param>
    <param-name>url</param-name>
    <param-value>jdbc:mysql://localhost/mvc</param-value>
  </context-param>
  <context-param>
    <param-name>username</param-name>
    <param-value>root</param-value>
  </context-param>
  <context-param>
    <param-name>password</param-name>
    <param-value>java0000</param-value>
  </context-param>
  
  <!-- 필터 선언 -->
  <filter>
  	<filter-name>CharacterEncodingFilter</filter-name>
  	<filter-class>mvc.filter.CharacterEncodingFilter</filter-class>
  	
  	<init-param>
  		<param-name>encoding</param-name>
  		<param-value>UTF-8</param-value>
  	</init-param>
  </filter>
  
  <!-- 필터 URL 매핑 -->
  <filter-mapping>
  	<filter-name>CharacterEncodingFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- 서블릿 선언 -->
  <!-- 
  <servlet>
  	<servlet-name>AppInitServlet</servlet-name>
  	<servlet-class>mvc.servlet.AppInitServlet</servlet-class>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  -->
	<!-- 서블릿을 배치할 때 <load-on-startup> 태그를 지정하면, 해당 서블릿은 웹 어플리케이션이 시작될 때 자동으로 생성됩니다. 태그의 값 = 생성 순서. -->
	<!-- URL 매핑이 없는 서블릿은 클라이언트에서 실행을 요청할 수 X. AppInitServlet처럼 다른 서블릿을 위해 준비 작업을 수행하는 서블릿인 경우 URL을 지정하지 않음 -->
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>